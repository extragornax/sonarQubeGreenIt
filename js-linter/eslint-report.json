[{"filePath":"/home/gaspard/Documents/Projet/sonarQubeGreenIt/js-linter/lib/index.js","messages":[{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":5,"column":1,"nodeType":"Literal","messageId":"wrongQuotes","endLine":5,"endColumn":13,"fix":{"range":[69,81],"text":"'use strict'"}},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":11,"column":20,"nodeType":"Identifier","messageId":"undef","endLine":11,"endColumn":27},{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":11,"column":28,"nodeType":"Literal","messageId":"wrongQuotes","endLine":11,"endColumn":42,"fix":{"range":[290,304],"text":"'requireindex'"}},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":19,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":19,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'__dirname' is not defined.","line":19,"column":37,"nodeType":"Identifier","messageId":"undef","endLine":19,"endColumn":46},{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":19,"column":49,"nodeType":"Literal","messageId":"wrongQuotes","endLine":19,"endColumn":57,"fix":{"range":[574,582],"text":"'/rules'"}}],"errorCount":3,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"/**\n * @fileoverview description to b completed\n * @author cnumr\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar requireIndex = require(\"requireindex\");\n\n//------------------------------------------------------------------------------\n// Plugin Definition\n//------------------------------------------------------------------------------\n\n\n// import all rules in lib/rules\nmodule.exports.rules = requireIndex(__dirname + \"/rules\");\n\n\n\n","usedDeprecatedRules":[]},{"filePath":"/home/gaspard/Documents/Projet/sonarQubeGreenIt/js-linter/lib/rules/s1111.js","messages":[{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":5,"column":1,"nodeType":"Literal","messageId":"wrongQuotes","endLine":5,"endColumn":13,"fix":{"range":[58,70],"text":"'use strict'"}},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":11,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":11,"endColumn":7},{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":14,"column":26,"nodeType":"Literal","messageId":"wrongQuotes","endLine":14,"endColumn":42,"fix":{"range":[327,343],"text":"'Readme example'"}},{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":15,"column":23,"nodeType":"Literal","messageId":"wrongQuotes","endLine":15,"endColumn":35,"fix":{"range":[367,379],"text":"'Fill me in'"}},{"ruleId":"no-unused-vars","severity":2,"message":"'context' is defined but never used.","line":24,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":29}],"errorCount":2,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"/**\n * @fileoverview Readme example\n * @author myname\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"Readme example\",\n            category: \"Fill me in\",\n            recommended: false\n        },\n        fixable: null,  // or \"code\" or \"whitespace\"\n        schema: [\n            // fill in your schema\n        ]\n    },\n\n    create: function(context) {\n\n        // variables should be defined here\n\n        //----------------------------------------------------------------------\n        // Helpers\n        //----------------------------------------------------------------------\n\n        // any helper functions should go here or else delete this section\n\n        //----------------------------------------------------------------------\n        // Public\n        //----------------------------------------------------------------------\n\n        return {\n\n            // give me methods\n\n        };\n    }\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/gaspard/Documents/Projet/sonarQubeGreenIt/js-linter/lib/rules/s34.js","messages":[{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":5,"column":1,"nodeType":"Literal","messageId":"wrongQuotes","endLine":5,"endColumn":13,"fix":{"range":[88,100],"text":"'use strict'"}},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":11,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":11,"endColumn":7},{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":14,"column":26,"nodeType":"Literal","messageId":"wrongQuotes","endLine":14,"endColumn":63,"fix":{"range":[357,394],"text":"'Eviter d\\'utiliser try-catch-finally'"}},{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":15,"column":23,"nodeType":"Literal","messageId":"wrongQuotes","endLine":15,"endColumn":35,"fix":{"range":[418,430],"text":"'Fill me in'"}},{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":40,"column":26,"nodeType":"Literal","messageId":"wrongQuotes","endLine":40,"endColumn":63,"fix":{"range":[1232,1269],"text":"'Eviter d\\'utiliser try-catch-finally'"}},{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":44,"column":13,"nodeType":"Literal","messageId":"wrongQuotes","endLine":44,"endColumn":32,"fix":{"range":[1326,1345],"text":"'TryStatement:exit'"}}],"errorCount":1,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":5,"source":"/**\n * @fileoverview Utiliser les op√©rations primitives\n * @author Gael Pellevoizin\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"Eviter d'utiliser try-catch-finally\",\n            category: \"Fill me in\",\n            recommended: false\n        },\n        fixable: null, // or \"code\" or \"whitespace\"\n        schema: [\n            // fill in your schema\n        ]\n    },\n\n    create: function(context) {\n\n        // variables should be defined here\n\n        //----------------------------------------------------------------------\n        // Helpers\n        //----------------------------------------------------------------------\n\n        // any helper functions should go here or else delete this section\n\n        //----------------------------------------------------------------------\n        // Public\n        //----------------------------------------------------------------------\n        function findPostIncrement(node) {\n            context.report({\n                node,\n                message: \"Eviter d'utiliser try-catch-finally\",\n            });\n        }\n        return {\n            \"TryStatement:exit\": findPostIncrement,\n            // give me methods\n\n        };\n    }\n};","usedDeprecatedRules":[]},{"filePath":"/home/gaspard/Documents/Projet/sonarQubeGreenIt/js-linter/lib/rules/s67.js","messages":[{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":5,"column":1,"nodeType":"Literal","messageId":"wrongQuotes","endLine":5,"endColumn":13,"fix":{"range":[81,93],"text":"'use strict'"}},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":11,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":11,"endColumn":7},{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":14,"column":26,"nodeType":"Literal","messageId":"wrongQuotes","endLine":14,"endColumn":55,"fix":{"range":[350,379],"text":"'Remplacer les $i++ par ++$i'"}},{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":15,"column":23,"nodeType":"Literal","messageId":"wrongQuotes","endLine":15,"endColumn":35,"fix":{"range":[403,415],"text":"'Fill me in'"}},{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":40,"column":30,"nodeType":"Literal","messageId":"wrongQuotes","endLine":40,"endColumn":60,"fix":{"range":[1262,1292],"text":"'Remplacer les $i++ par ++$i.'"}},{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":46,"column":13,"nodeType":"Literal","messageId":"wrongQuotes","endLine":46,"endColumn":36,"fix":{"range":[1368,1391],"text":"'UpdateExpression:exit'"}}],"errorCount":1,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":5,"source":"/**\n * @fileoverview Remplacer les $i++ par ++$i\n * @author Gael Pellevoizin\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"Remplacer les $i++ par ++$i\",\n            category: \"Fill me in\",\n            recommended: false,\n        },\n        fixable: null, // or \"code\" or \"whitespace\"\n        schema: [\n            // fill in your schema\n        ],\n    },\n\n    create: function(context) {\n        // variables should be defined here\n\n        //----------------------------------------------------------------------\n        // Helpers\n        //----------------------------------------------------------------------\n\n        // any helper functions should go here or else delete this section\n\n        //----------------------------------------------------------------------\n        // Public\n        //----------------------------------------------------------------------\n        function findPostIncrement(node) {\n            if (!node.prefix) {\n                context.report({\n                    node,\n                    message: \"Remplacer les $i++ par ++$i.\",\n                });\n            }\n        }\n\n        return {\n            \"UpdateExpression:exit\": findPostIncrement,\n        };\n    },\n};","usedDeprecatedRules":[]},{"filePath":"/home/gaspard/Documents/Projet/sonarQubeGreenIt/js-linter/lib/rules/s69.js","messages":[{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":5,"column":1,"nodeType":"Literal","messageId":"wrongQuotes","endLine":5,"endColumn":13,"fix":{"range":[125,137],"text":"'use strict'"}},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":11,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":11,"endColumn":7},{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":14,"column":26,"nodeType":"Literal","messageId":"wrongQuotes","endLine":14,"endColumn":99,"fix":{"range":[394,467],"text":"'Ne pas appeler de fonction dans la d√©claration d‚Äôune boucle de type for'"}},{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":15,"column":23,"nodeType":"Literal","messageId":"wrongQuotes","endLine":15,"endColumn":35,"fix":{"range":[491,503],"text":"'Fill me in'"}},{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":48,"column":30,"nodeType":"Literal","messageId":"wrongQuotes","endLine":48,"endColumn":103,"fix":{"range":[1708,1781],"text":"'Ne pas appeler de fonction dans la d√©claration d‚Äôune boucle de type for'"}},{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":54,"column":13,"nodeType":"Literal","messageId":"wrongQuotes","endLine":54,"endColumn":32,"fix":{"range":[1857,1876],"text":"'ForStatement:exit'"}}],"errorCount":1,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":5,"source":"/**\n * @fileoverview Ne pas appeler de fonction dans la d√©claration d‚Äôune boucle de type for\n * @author Gael Pellevoizin\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"Ne pas appeler de fonction dans la d√©claration d‚Äôune boucle de type for\",\n            category: \"Fill me in\",\n            recommended: false\n        },\n        fixable: null, // or \"code\" or \"whitespace\"\n        schema: [\n            // fill in your schema\n        ]\n    },\n\n    create: function(context) {\n\n        // variables should be defined here\n\n        //----------------------------------------------------------------------\n        // Helpers\n        //----------------------------------------------------------------------\n\n        // any helper functions should go here or else delete this section\n\n        //----------------------------------------------------------------------\n        // Public\n        //----------------------------------------------------------------------\n\n        function obvious(node) {\n            //console.log(node.update)\n            if (node.init.right.type == 'CallExpression' ||\n                node.init.left.type == 'CallExpression' ||\n                node.test.right.type == 'CallExpression' ||\n                node.test.left.type == 'CallExpression' ||\n                node.update.right.type == 'CallExpression' ||\n                node.update.left.type == 'CallExpression') {\n                context.report({\n                    node,\n                    message: \"Ne pas appeler de fonction dans la d√©claration d‚Äôune boucle de type for\",\n                });\n            }\n        }\n\n        return {\n            \"ForStatement:exit\": obvious,\n\n        };\n    }\n};","usedDeprecatedRules":[]},{"filePath":"/home/gaspard/Documents/Projet/sonarQubeGreenIt/js-linter/tests/lib/rules/s1111.js","messages":[{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":5,"column":1,"nodeType":"Literal","messageId":"wrongQuotes","endLine":5,"endColumn":13,"fix":{"range":[58,70],"text":"'use strict'"}},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":11,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":11,"endColumn":19},{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":11,"column":20,"nodeType":"Literal","messageId":"wrongQuotes","endLine":11,"endColumn":46,"fix":{"range":[271,297],"text":"'../../../lib/rules/s1111'"}},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":13,"column":18,"nodeType":"Identifier","messageId":"undef","endLine":13,"endColumn":25},{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":13,"column":26,"nodeType":"Literal","messageId":"wrongQuotes","endLine":13,"endColumn":34,"fix":{"range":[326,334],"text":"'eslint'"}},{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":21,"column":16,"nodeType":"Literal","messageId":"wrongQuotes","endLine":21,"endColumn":23,"fix":{"range":[572,579],"text":"'s1111'"}},{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":30,"column":19,"nodeType":"Literal","messageId":"wrongQuotes","endLine":30,"endColumn":25,"fix":{"range":[713,719],"text":"'fail'"}},{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":32,"column":26,"nodeType":"Literal","messageId":"wrongQuotes","endLine":32,"endColumn":39,"fix":{"range":[769,782],"text":"'Fill me in.'"}},{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":33,"column":23,"nodeType":"Literal","messageId":"wrongQuotes","endLine":33,"endColumn":31,"fix":{"range":[806,814],"text":"'Me too'"}}],"errorCount":2,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":7,"source":"/**\n * @fileoverview Readme example\n * @author myname\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar rule = require(\"../../../lib/rules/s1111\"),\n\n    RuleTester = require(\"eslint\").RuleTester;\n\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar ruleTester = new RuleTester();\nruleTester.run(\"s1111\", rule, {\n\n    valid: [\n\n        // give me some code that won't trigger a warning\n    ],\n\n    invalid: [\n        {\n            code: \"fail\",\n            errors: [{\n                message: \"Fill me in.\",\n                type: \"Me too\"\n            }]\n        }\n    ]\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/gaspard/Documents/Projet/sonarQubeGreenIt/js-linter/tests/lib/rules/s34.js","messages":[{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":5,"column":1,"nodeType":"Literal","messageId":"wrongQuotes","endLine":5,"endColumn":13,"fix":{"range":[88,100],"text":"'use strict'"}},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":11,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":11,"endColumn":19},{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":11,"column":20,"nodeType":"Literal","messageId":"wrongQuotes","endLine":11,"endColumn":44,"fix":{"range":[301,325],"text":"'../../../lib/rules/s34'"}},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":13,"column":18,"nodeType":"Identifier","messageId":"undef","endLine":13,"endColumn":25},{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":13,"column":26,"nodeType":"Literal","messageId":"wrongQuotes","endLine":13,"endColumn":34,"fix":{"range":[354,362],"text":"'eslint'"}},{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":21,"column":16,"nodeType":"Literal","messageId":"wrongQuotes","endLine":21,"endColumn":21,"fix":{"range":[600,605],"text":"'s34'"}},{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":29,"column":15,"nodeType":"Literal","messageId":"wrongQuotes","endLine":29,"endColumn":25,"fix":{"range":[726,736],"text":"'try { \\n'"}},{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":30,"column":13,"nodeType":"Literal","messageId":"wrongQuotes","endLine":30,"endColumn":38,"fix":{"range":[751,776],"text":"' nonExistentFunction();'"}},{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":31,"column":13,"nodeType":"Literal","messageId":"wrongQuotes","endLine":31,"endColumn":33,"fix":{"range":[791,811],"text":"' } catch (error) {'"}},{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":32,"column":13,"nodeType":"Literal","messageId":"wrongQuotes","endLine":32,"endColumn":36,"fix":{"range":[826,849],"text":"' console.log(error) }'"}},{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":34,"column":22,"nodeType":"Literal","messageId":"wrongQuotes","endLine":34,"endColumn":59,"fix":{"range":[891,928],"text":"'Eviter d\\'utiliser try-catch-finally'"}},{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":35,"column":19,"nodeType":"Literal","messageId":"wrongQuotes","endLine":35,"endColumn":33,"fix":{"range":[948,962],"text":"'TryStatement'"}}],"errorCount":2,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":10,"source":"/**\n * @fileoverview Utiliser les op√©rations primitives\n * @author Gael Pellevoizin\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar rule = require(\"../../../lib/rules/s34\"),\n\n    RuleTester = require(\"eslint\").RuleTester;\n\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar ruleTester = new RuleTester();\nruleTester.run(\"s34\", rule, {\n\n    valid: [\n\n        // give me some code that won't trigger a warning\n    ],\n\n    invalid: [{\n        code: \"try { \\n\" +\n            \" nonExistentFunction();\" +\n            \" } catch (error) {\" +\n            \" console.log(error) }\",\n        errors: [{\n            message: \"Eviter d'utiliser try-catch-finally\",\n            type: \"TryStatement\"\n        }]\n    }]\n});","usedDeprecatedRules":[]},{"filePath":"/home/gaspard/Documents/Projet/sonarQubeGreenIt/js-linter/tests/lib/rules/s67.js","messages":[{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":5,"column":1,"nodeType":"Literal","messageId":"wrongQuotes","endLine":5,"endColumn":13,"fix":{"range":[81,93],"text":"'use strict'"}},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":11,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":11,"endColumn":19},{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":11,"column":20,"nodeType":"Literal","messageId":"wrongQuotes","endLine":11,"endColumn":44,"fix":{"range":[294,318],"text":"'../../../lib/rules/s67'"}},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":13,"column":18,"nodeType":"Identifier","messageId":"undef","endLine":13,"endColumn":25},{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":13,"column":26,"nodeType":"Literal","messageId":"wrongQuotes","endLine":13,"endColumn":34,"fix":{"range":[347,355],"text":"'eslint'"}},{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":21,"column":16,"nodeType":"Literal","messageId":"wrongQuotes","endLine":21,"endColumn":21,"fix":{"range":[593,598],"text":"'s67'"}},{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":24,"column":9,"nodeType":"Literal","messageId":"wrongQuotes","endLine":24,"endColumn":20,"fix":{"range":[630,641],"text":"'++counter'"}},{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":25,"column":9,"nodeType":"Literal","messageId":"wrongQuotes","endLine":25,"endColumn":23,"fix":{"range":[651,665],"text":"'counter + 73'"}},{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":26,"column":9,"nodeType":"Literal","messageId":"wrongQuotes","endLine":26,"endColumn":24,"fix":{"range":[675,690],"text":"'counter += 73'"}},{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":27,"column":9,"nodeType":"Literal","messageId":"wrongQuotes","endLine":27,"endColumn":24,"fix":{"range":[700,715],"text":"'counter =+ 73'"}},{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":28,"column":9,"nodeType":"Literal","messageId":"wrongQuotes","endLine":28,"endColumn":23,"fix":{"range":[725,739],"text":"'73 + counter'"}},{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":32,"column":15,"nodeType":"Literal","messageId":"wrongQuotes","endLine":32,"endColumn":27,"fix":{"range":[778,790],"text":"'counter++;'"}},{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":34,"column":22,"nodeType":"Literal","messageId":"wrongQuotes","endLine":34,"endColumn":52,"fix":{"range":[832,862],"text":"'Remplacer les $i++ par ++$i.'"}},{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":35,"column":19,"nodeType":"Literal","messageId":"wrongQuotes","endLine":35,"endColumn":37,"fix":{"range":[882,900],"text":"'UpdateExpression'"}}],"errorCount":2,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":12,"source":"/**\n * @fileoverview Remplacer les $i++ par ++$i\n * @author Gael Pellevoizin\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar rule = require(\"../../../lib/rules/s67\"),\n\n    RuleTester = require(\"eslint\").RuleTester;\n\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar ruleTester = new RuleTester();\nruleTester.run(\"s67\", rule, {\n\n    valid: [\n        \"++counter\",\n        \"counter + 73\",\n        \"counter += 73\",\n        \"counter =+ 73\",\n        \"73 + counter\"\n    ],\n\n    invalid: [{\n        code: \"counter++;\",\n        errors: [{\n            message: \"Remplacer les $i++ par ++$i.\",\n            type: \"UpdateExpression\"\n        }]\n    }]\n});","usedDeprecatedRules":[]},{"filePath":"/home/gaspard/Documents/Projet/sonarQubeGreenIt/js-linter/tests/lib/rules/s69.js","messages":[{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":5,"column":1,"nodeType":"Literal","messageId":"wrongQuotes","endLine":5,"endColumn":13,"fix":{"range":[125,137],"text":"'use strict'"}},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":11,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":11,"endColumn":19},{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":11,"column":20,"nodeType":"Literal","messageId":"wrongQuotes","endLine":11,"endColumn":44,"fix":{"range":[338,362],"text":"'../../../lib/rules/s69'"}},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":13,"column":18,"nodeType":"Identifier","messageId":"undef","endLine":13,"endColumn":25},{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":13,"column":26,"nodeType":"Literal","messageId":"wrongQuotes","endLine":13,"endColumn":34,"fix":{"range":[391,399],"text":"'eslint'"}},{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":21,"column":16,"nodeType":"Literal","messageId":"wrongQuotes","endLine":21,"endColumn":21,"fix":{"range":[637,642],"text":"'s69'"}},{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":29,"column":15,"nodeType":"Literal","messageId":"wrongQuotes","endLine":29,"endColumn":72,"fix":{"range":[763,820],"text":"'for (i = 0; i < getMaxValue(); i++) { console.log(i);} '"}},{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":31,"column":22,"nodeType":"Literal","messageId":"wrongQuotes","endLine":31,"endColumn":95,"fix":{"range":[862,935],"text":"'Ne pas appeler de fonction dans la d√©claration d‚Äôune boucle de type for'"}},{"ruleId":"quotes","severity":1,"message":"Strings must use singlequote.","line":32,"column":19,"nodeType":"Literal","messageId":"wrongQuotes","endLine":32,"endColumn":33,"fix":{"range":[955,969],"text":"'ForStatement'"}}],"errorCount":2,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":7,"source":"/**\n * @fileoverview Ne pas appeler de fonction dans la d√©claration d‚Äôune boucle de type for\n * @author Gael Pellevoizin\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar rule = require(\"../../../lib/rules/s69\"),\n\n    RuleTester = require(\"eslint\").RuleTester;\n\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar ruleTester = new RuleTester();\nruleTester.run(\"s69\", rule, {\n\n    valid: [\n\n        // give me some code that won't trigger a warning\n    ],\n\n    invalid: [{\n        code: \"for (i = 0; i < getMaxValue(); i++) { console.log(i);} \",\n        errors: [{\n            message: \"Ne pas appeler de fonction dans la d√©claration d‚Äôune boucle de type for\",\n            type: \"ForStatement\"\n        }]\n    }]\n});","usedDeprecatedRules":[]}]
